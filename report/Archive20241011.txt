Bonjour M. Jacquenet,

Voici l'archive de notre travail pour la semaine du vendredi 04/01/2024 au vendredi 11/10/2024 réalisé par le groupe Benguezzou/Benmamar/Fizser.

Tâches réalisées cette semaine :

- Refonte du yacc, correction des erreurs de syntaxe présente.
- Ajout d'une fonction d'erreur plus détaillée (affichage de la ligne d'erreur ainsi que le lexème).
- Correction des erreurs lexicales (IDF, TOKEN_FLOAT, INTEGER, etc...). 
- Modularisation du code source, pour une meilleure lisibilité. Nous avons décider de séparer les règles syntaxiques en plusieurs fichiers, 
  chaque fichier correspondant à un type de règles (en l'occurence, les déclarations, les expressions, les instructions, etc...).  
  Pour pouvoir compiler le code, chaque fichier est concaténé dans un fichier commun appelé combined.y. Le fichier résultant contient la grammaire complète.
- Création d'un fichier de test pour vérifier la validité de la grammaire mis en place (example/test-1.txt).


En résumé, nous avons travaillé sur la correction des erreurs lexicales et syntaxiques, ainsi que sur la modularisation du code source.
Nous avons décidé de retirer certaines règles syntaxiques qui n'étaient pas fonctionnelles, afin de les reimplémenter plus tard.

Pour tester le code, il suffit de lancer la commande suivante :
```
make && ./compilateur.exe < example/test-1.txt
make && ./compilateur.exe < example/test-2.txt // pour illustrer une erreur de syntaxe
```

Prochaines étapes :

- Implémentation des règles syntaxiques manquantes.
- Création de la table lexicographique et de hashage.


Question :

Concernant l'utilisation des tokens de DEBUT et FIN nous avons remaqué, que dans la grammaire que vous proposer en ligne, ils sont utilisés pour délimiter les instructions : 
liste_instructions  -> DEBUT suite_liste_inst FIN

Or dans notre grammaire nous avons fait le choix de définir les tokens de DEBUT et FIN en tant qu'accolades ('{' et '}') pour délimiter les instructions pour que notre grammaire soit plus proche de la syntaxe C.
Dans notre cas les tokens de début et de fin sont utilisés pour délimiter les blocs d'instructions, pour définir les fonctions, les conditions, etc...
Par exemple dans notre cas un programme ressemblerait à ceci :

```
PROG

var d : int;

func myfunction(a : int, b : int) -> int 
{
    if a > 0 then
    {
        b := 0;
    }
}

d := myfunction(1, 2);
```

Le PROG principal n'est donc pas délimité par des tokens DEBUT et FIN, mais uniquement par le mot clé PROG. Notre question est donc de savoir si cela pose problème pour la suite du projet, 
notamment par rapport à la table des régions que nous devrons implémenter. 
Est ce que le fait de ne pas utiliser les tokens DEBUT et FIN pour délimiter le programme principal posera problème pour la suite du projet ?

Nous vous remercions par avance pour votre réponse.

----

Cordialement,
Benguezzou Mohamed